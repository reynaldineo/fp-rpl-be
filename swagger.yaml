tags:
- name: auth
  description: auth API
- name: user
  description: user API
- name: course
  description: course API
- name: store
  description: store API

paths:
# [POST] auth/login
  /auth/login:
    post:
      tags:
      - auth
      summary: Login to an existing account
      parameters:
      - name: body
        in: body
        description: login Object
        required: true
        schema:
          $ref: '#/definitions/Login'
      responses:
        200:
          description: 'OK'
          examples:
            application/json:
              message: "success"
              id: "user-id"
              role: "Konsumen"
              jwt: "token"
        400:
          description: 'Bad Request'
        500:
          description: 'Server Error'

# [POST] auth/register
  /auth/register:
    post:
      tags:
      - auth
      summary: Register an account
      parameters:
      - name: body
        in: body
        description: Register Object
        required: true
        schema:
          $ref: '#/definitions/Register'
      responses:
        200:
          description: 'OK'
          examples:
            application/json:
              message: "success"
              id: "user-id"
        400:
          description: 'Bad Request'
        500:
          description: 'Server Error'

  # [GET] user/getrole
  /user/getrole:
    get:
      tags:
      - user
      summary: Get the role of current logged in user
      responses:
        200:
          description: 'OK'
          examples:
            application/json:
              id: "user-id"
              role: "Produsen"
        400:
          description: 'Bad Request'
        401:
          description: Unauthorized
        500:
          description: 'Server Error'

  # [GET] user/details
  /user/details:
    get:
      tags:
      - user
      summary: Get the details of current logged in user
      responses:
        200:
          description: 'OK'
          examples:
              application/json:
                id: "user-id"
                email: "user@example.com"
                username: null
                role: null
                created_at: "2024-04-08T00:00:00.000Z"
                bio: null
        400:
          description: 'Bad Request'
        401:
          description: Unauthorized
        500:
          description: 'Server Error'

  # [PUT] user/update
  /user/update:
    put:
      tags:
      - user
      summary: Update one of the properties on the account
      parameters:
      - name: body
        in: body
        description: Update one the properties if it's specified. Otherwise don't include it
        required: false
        schema:
          $ref: '#/definitions/Update'
      responses:
        200:
          description: 'OK'
          examples:
              application/json:
                message: "updated"
                id: "user-id"
                email: "user@example.com"
                username: null  
                role: "Produsen"
                bio: null
        400:
          description: 'Bad Request'
        401:
          description: Unauthorized
        500:
          description: 'Server Error'

  # [GET] /course
  /course:
    get:
      tags:
        - course
      summary: Get all courses
      parameters:   
        - in: query
          name: limit
          schema: 
            type: integer
          required: true
          description: The numbers of items to return
        - in: query
          name: offset
          schema:
            type: integer
          required: true
          description: The numbers of items to skip before starting to collect the result set
        - in: search
          name: search
          schema:
            type: string
          required: false
          description: A string for getting the course which contains it in the title
      responses:
        200:
          description: 'OK'
          examples:
            application/json:
              success: true
              message: "Courses are retrieved successfully"
              data:
                id: "course-id"
                url: "course-vid-url"
                img_cover: "course-imgcover-url"
                title: "Cara mengolah sampah dengan cara..."
                label: "Organik"
                like_count: 0
                account:
                  username: "John"
        400:
          description: 'Bad Request'
        401:
          description: Unauthorized
        500:
          description: 'Server Error'

  # [GET] /course/:username
  /course/{username}:
    get:
      tags:
        - course
      summary: Get all courses of a user
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: The username of the user
        - in: query
          name: limit
          schema: 
            type: integer
          required: true
          description: The numbers of items to return
        - in: query
          name: offset
          schema:
            type: integer
          required: true
          description: The numbers of items to skip before starting to collect the result set
      responses:
        200:
          description: 'OK'
          examples:
            application/json:
              success: true
              message: "Success get course by username"
              data:
                id: "course-id"
                url: "course-vid-url"
                img_cover: "course-imgcover-url"
                title: "Cara mengolah sampah dengan cara..."
                label: "Organik"
                like_count: 0
                account:
                  username: "John"
        400:
          description: 'Bad Request'
        401:
          description: Unauthorized
        500:
          description: 'Server Error'
  
  # [GET] /course/:courseID/detail
  /course/{courseId}/detail:
    get:
      tags:
        - course
      summary: Get details of a course
      parameters:
        - in: path
          name: courseId
          schema:
            type: string
          required: true
          description: The ID of the course
      responses:
        200:
          description: 'OK'
          examples:
            application/json:
              success: true
              murse-captionessage: "Success get course detail"
              data:
                id: "course-id"
                url: "course-vid-url"
                img_cover: "course-imgcover-url"
                title: "Cara mengolah sampah dengan cara..."
                caption: "Berikut cara mengolah ..."
                label: "Organik"
                like_count: 0
                uploaded_at: "course-upload-time"
                account:
                  username: "John"
                comment:
                  account:
                    username: "John"
                  comment: "I just commented my own course"
        400:
          description: 'Bad Request'
        401:
          description: Unauthorized
        500:
          description: 'Server Error'

  # [GET] /course/:courseID/getLikes
  /course/{courseId}/getLikes:
    get:
      tags:
        - course
      summary: Get all likes of a course
      parameters:
        - in: path
          name: courseId
          schema:
            type: string
          required: true
          description: The ID of the course
      responses:
        200:
          description: 'OK'
          examples:
            application/json:
              success: true
              message: "Success get user who likes the course"
              data:
                account:
                  username: "John"
        400:
          description: 'Bad Request'
        401:
          description: Unauthorized
        500:
          description: 'Server Error'

  # [GET] /course/:courseID/product
  /course/{courseId}/product:
    get:
      tags:
        - course
      summary: Get all products of a course
      parameters:
        - in: path
          name: courseId
          schema:
            type: string
          required: true
          description: The ID of the course
      responses:
        200:
          description: 'OK'
          examples:
            application/json:
              success: true
              message: "Success get product from course"
              data:
                id: "product-id"
                img_url: "product-img-url"
                name: "product-name"
                price: 3000
        400:
          description: 'Bad Request'
        401:
          description: Unauthorized
        500:
          description: 'Server Error'
        
  # [POST] /course/create
  /course/create:
    post:
      tags:
        - course
      summary: Create a course
      consumes: 
        - multipart/form-data
      parameters:
        - in: formData
          name: vid
          required: true
          description: Video File
          type: file
        - in: formData
          name: img_cover
          required: true
          description: Cover Image File
          type: file
        - in: formData
          name: title
          required: true
          description: Course Title
          type: string
        - in: formData
          name: caption
          required: true
          description: Course Caption
          type: string
        - in: formData
          name: label
          required: true
          description: Course Label
      responses:
        200:
          description: 'OK'
          examples:
            application/json:
              success: true
              message: "Course is created successfully"
              data:
                id: "course-id that just created"
        400:
          description: 'Bad Request'
        401:
          description: Unauthorized
        500:
          description: 'Server Error'
  
  # [POST] /course/{courseID}/tapLike
  /course/{courseId}/tapLike:
    post:
      tags:
        - course
      summary: Like or unlike a course
      parameters:
        - in: path
          name: courseId
          schema:
            type: string
          required: true
          description: The ID of the course
      responses:
        200:
          description: 'OK'
          examples:
            application/json:
              success: true
              message: "Course is liked or unliked successfully"
              data:
                id: "like-id that just created or deleted"
                like_count: "the number of likes after like or unlike"
        400:
          description: 'Bad Request'
        401:
          description: Unauthorized
        500:
          description: 'Server Error'

  # [POST] /course/{courseID}/addComment
  /course/{courseId}/addComment:
    post:
      tags:
        - course
      summary: Add a comment to a course
      parameters:
        - in: path
          name: courseId
          schema:
            type: string
          required: true
          description: The ID of the course
        - in: body
          name: body
          required: true
          description: Comment Object
          schema:
            $ref: '#/definitions/Comment'
      responses:
        200:
          description: 'OK'
          examples:
            application/json:
              success: true
              message: "Comment is created successfully"
              data:
                account:
                  email: "user-email that just commented"
                comment: "detail of comment"
        400:
          description: 'Bad Request'
        401:
          description: Unauthorized
        500:
          description: 'Server Error'
    
  # [PUT] /course/{courseID}/update
  /course/{courseId}/update:
    put:
      tags:
        - course
      summary: Update a course
      parameters:
        - in: path
          name: courseId
          schema:
            type: string
          required: true
          description: The ID of the course
        - in: body
          name: body
          required: true
          description: Course Object
          schema:
            $ref: '#/definitions/Course'
      responses:
        200:
          description: 'OK'
          examples:
            application/json:
              success: true
              message: "Course is updated successfully"
              data:
                id: "course-id"
                title: "new course-title"
                caption: "new course-caption"
                label: "new course-label, Organik or Anorganik" 
        400:
          description: 'Bad Request'
        401:
          description: Unauthorized
        500:
          description: 'Server Error'

  # [DELETE] /course/{courseID}/delete
  /course/{courseId}/delete:
    delete:
      tags:
        - course
      summary: Delete a course
      parameters:
        - in: path
          name: courseId
          schema:
            type: string
          required: true
          description: The ID of the course
      responses:
        200:
          description: 'OK'
          examples:
            application/json:
              success: true
              message: "Course is deleted successfully"
              data:
                id: "course-id that just deleted"
                url: "course-url that just deleted"
                title: "course-title that just deleted"
        400:
          description: 'Bad Request'
        401:
          description: Unauthorized
        500:
          description: 'Server Error'
      
  # [PUT] /store/cart/:productID/update
  /store/cart/{productID}/update:
    put:
      tags:
      - store
      summary: Update the quantity of a product in the cart
      parameters:
        - in: path
          name: productID
          schema:
            type: string
          required: true 
          description: The ID of the product
        - in: body
          name: quantity
          required: true
          description: The number of new quantity of the product
          schema:
            $ref: '#/definitions/qty'
      responses:
        200:
          description: 'OK'
          examples:
            application/json:
              success: true
              message: "Cart is updated"
              data:
                product:
                  id: "product-id"
                  name: "product-name"
                quantity: 1
                account:
                  email: "user@example.com"
                  username: "user1234"
                current_cost: 20000
        400:
          description: 'Bad Request'
        401:
          description: Unauthorized
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # [DELETE] /store/cart/:id/delete
  /store/cart/{productID}/delete:
    delete:
      tags:
      - store
      summary: Delete a product from the cart
      parameters:
        - in: path
          name: productID
          schema:
            type: string
          required: true
          description: The ID of the product
      responses:
        200:
          description: 'OK'
          examples:
            application/json:
              success: true
              message: "Product is deleted from cart"
              data: 
                product:
                  id: "product-id"
                  name: "product-name"
                quantity: 0
                account: 
                  email: "user@example.com"
                  username: "user1234"
                current_cost: 3000
        400:
          description: 'Bad Request'
        401:
          description: Unauthorized
        500:
          description: 'Server Error'

# definitions
definitions:
  Login:
    type: object
    required:
        -email
        -password
    properties:
      email:
        type: string
        format: email
        description: email
      password:
        type: string
        description: password
  Register:
    type: object
    required:
        -email
        -password
    properties:
      email:
        type: string
        format: email
        description: email
      password:
        type: string
        description: password
  Update:
    type: object
    properties:
      email:
        type: string
        format: email
        description: email
        nullable: true
      username:
        type: string
        description: username
        nullable: true
      password:
        type: string
        description: password
        nullable: true
      role:
        type: string
        description: role
        nullable: true
      bio:
        type: string
        description: bio
        nullable: true
  qty:
    type: object
    properties:
      qty:
        type: number
  Course:
    type: object
    properties:
      title:
        type: string
        description: title
      caption:
        type: string
        description: caption
      label:
        type: string
        description: label
  Comment:
    type: object
    properties:
      comment:
        type: string
        description: comment
schemes:
 - https
 - http