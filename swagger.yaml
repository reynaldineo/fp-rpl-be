tags:
- name: auth
  description: auth API
- name: user
  description: user API
- name: course
  description: course API
- name: store
  description: store API

paths:
# [POST] auth/login
  /auth/login:
    post:
      tags:
      - auth
      summary: Login to an existing account
      parameters:
      - name: body
        in: body
        description: login Object
        required: true
        schema:
          $ref: '#/definitions/Login'
      responses:
        200:
          description: 'OK'
          examples:
            application/json:
              message: "success"
              id: "user-id"
              role: "Konsumen"
              jwt: "token"
        400:
          description: 'Bad Request'
        500:
          description: 'Server Error'

# [POST] auth/register
  /auth/register:
    post:
      tags:
      - auth
      summary: Register an account
      parameters:
      - name: body
        in: body
        description: Register Object
        required: true
        schema:
          $ref: '#/definitions/Register'
      responses:
        200:
          description: 'OK'
          examples:
            application/json:
              message: "success"
              id: "user-id"
        400:
          description: 'Bad Request'
        500:
          description: 'Server Error'

  # [GET] user/getrole
  /user/getrole:
    get:
      tags:
      - user
      summary: Get the role of current logged in user
      responses:
        200:
          description: 'OK'
          examples:
            application/json:
              id: "user-id"
              role: "Produsen"
        400:
          description: 'Bad Request'
        401:
          description: Unauthorized
        500:
          description: 'Server Error'

  # [GET] user/details
  /user/details:
    get:
      tags:
      - user
      summary: Get the details of current logged in user
      responses:
        200:
          description: 'OK'
          examples:
              application/json:
                id: "user-id"
                email: "user@example.com"
                username: null
                role: null
                created_at: "2024-04-08T00:00:00.000Z"
                bio: null
        400:
          description: 'Bad Request'
        401:
          description: Unauthorized
        500:
          description: 'Server Error'

  # [PUT] user/update
  /user/update:
    put:
      tags:
      - user
      summary: Update one of the properties on the account
      parameters:
      - name: body
        in: body
        description: Update one the properties if it's specified. Otherwise don't include it
        required: false
        schema:
          $ref: '#/definitions/Update'
      responses:
        200:
          description: 'OK'
          examples:
              application/json:
                message: "updated"
                id: "user-id"
                email: "user@example.com"
                username: null  
                role: "Produsen"
                bio: null
        400:
          description: 'Bad Request'
        401:
          description: Unauthorized
        500:
          description: 'Server Error'

  # [PUT] store/cart/:productID/update
  /store/cart/{productID}/update:
    put:
      tags:
      - store
      summary: Update the quantity of a product in the cart
      parameters:
        - in: path
          name: productID
          schema:
            type: string
          required: true 
          description: The ID of the product
        - in: body
          name: quantity
          required: true
          description: The number of new quantity of the product
          schema:
            $ref: '#/definitions/qty'
      responses:
        200:
          description: 'OK'
          examples:
            application/json:
              success: true
              message: "Cart is updated"
              data:
                product:
                  id: "product-id"
                  name: "product-name"
                quantity: 1
                account:
                  email: "user@example.com"
                  username: "user1234"
                current_cost: 20000
        400:
          description: 'Bad Request'
        401:
          description: Unauthorized
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # [DELETE] store/cart/:id/delete
  /store/cart/{productID}/delete:
    delete:
      tags:
      - store
      summary: Delete a product from the cart
      parameters:
        - in: path
          name: productID
          schema:
            type: string
          required: true
          description: The ID of the product
      responses:
        200:
          description: 'OK'
          examples:
            application/json:
              success: true
              message: "Product is deleted from cart"
              data: 
                product:
                  id: "product-id"
                  name: "product-name"
                quantity: 0
                account: 
                  email: "user@example.com"
                  username: "user1234"
                current_cost: 3000
        400:
          description: 'Bad Request'
        401:
          description: Unauthorized
        500:
          description: 'Server Error'

# definitions
definitions:
  Login:
    type: object
    required:
        -email
        -password
    properties:
      email:
        type: string
        format: email
        description: email
      password:
        type: string
        description: password
  Register:
    type: object
    required:
        -email
        -password
    properties:
      email:
        type: string
        format: email
        description: email
      password:
        type: string
        description: password
  Update:
    type: object
    properties:
      email:
        type: string
        format: email
        description: email
        nullable: true
      username:
        type: string
        description: username
        nullable: true
      password:
        type: string
        description: password
        nullable: true
      role:
        type: string
        description: role
        nullable: true
      bio:
        type: string
        description: bio
        nullable: true
  qty:
    type: object
    properties:
      qty:
        type: number

schemes:
 - https
 - http